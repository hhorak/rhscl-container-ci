# Can be started only by new commit in repository, manually or by upstream job
#
# parameters:
#   name: software collection name with namespace, e.g. httpd24-rh
#   release: version of RHEL/CentOS to test, e.g. 6
#   gituser: name of github user or organization
#   gitproject: name of a repository to test
#   project_trigger: projects which can trigger this job
#   hub_namespace: image namespace where to push image in Docker Hub
- job-template:
    name: 'rhscl-images-{name}-build'
    node: slave_rhel{release}_root
    scm:
        - images-build:
            gituser: '{gituser}'
            gitproject: '{gitproject}'
    triggers:
        - scm_fifteen_minutes
        - reverse:
            jobs: '{project_trigger}'
    builders:
        - add_dependencies_remote:
            name: '{name}'
        - shell: |
            #!/bin/bash
            set -ex
            . /usr/local/docker-squash/bin/activate

            git submodule update --init

            # Docker Hub namespace where to push
            HUB_NAMESPACE={hub_namespace}

            # In what namespace version have to be tagged
            VERSIONS=$(grep "VERSIONS = " Makefile | sed "s|VERSIONS = ||")

            IMAGES=""
            for version in ${{VERSIONS:-^}}; do
              image="{name}"
              # ${{image%-*}} deletes namespace from image name
              IMAGES+="${{image%-*}}-${{version/./}}-centos{release} "
            done

            # Remove resulted images - more disk space + no 'docker tag' failure
            for image_name in $IMAGES; do
              docker rmi -f centos/${{image_name}} docker.io/${{HUB_NAMESPACE}}/${{image_name}} || :
            done

            # Run base image tests and tests of each dependent image
            make test SKIP_SQUASH=1 UPDATE_BASE=1 TAG_ON_SUCCESS=true

            for remote in $(git remote | grep test_); do
              echo "Testing ${{remote#test_}}/master"
              git checkout $remote/master
              git submodule update --init
              make test SKIP_SQUASH=1
            done

            # Push to Docker Hub
            for image_name in $IMAGES; do
              docker tag centos/${{image_name}} docker.io/${{HUB_NAMESPACE}}/${{image_name}}
              HOME=~/.docker_credentials/${{HUB_NAMESPACE}} docker push docker.io/${{HUB_NAMESPACE}}/${{image_name}}
            done
    publishers:
        - email:
            recipients: 'mskalick@redhat.com hhorak@redhat.com'
